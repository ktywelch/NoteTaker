[{"id":"3TEcnGEVBW","title":"mozzila ","text":"const queryADatabase = function(mysql, query) {\n  return new Promise((resolve, reject) => {\n    mysql.query(query, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows);\n    });\n  })\n};\n\n/* What we're doing here is creating a promise that resolves or rejects \nbased on the outcome of an SQL query. Breaking it down, our outermost function\ntakes a database instance and an SQL query. That function will return a promise. \nThat promise will reject if the SQL query throws and resolve (returning the \ndatabase info) if the query goes through successfully. */"},{"id":"someid","title":"sometitle","text":"Changing this"},{"id":"-ru_XaS4yR","title":"Updating my note","text":"When updating the note I keep the same id ..."},{"id":"t3fnZz97Kw","title":"A Note to delete ","text":"Yes this note can be cahnged\nlet noteTitle;\nlet noteText;\nlet saveNoteBtn;\nlet newNoteBtn;\nlet noteList;\nif (window.location.pathname === '/notes') {\n  noteTitle = document.querySelector('.note-title');\n  noteText = document.querySelector('.note-textarea');\n  saveNoteBtn = document.querySelector('.save-note');\n  newNoteBtn = document.querySelector('.new-note');\n  noteList = document.querySelectorAll('.list-container .list-group');\n}"},{"id":"AwCc2BEsYF","title":"Antoher Note to Change","text":"Ok Found where I needed to add it"},{"id":"Zxc9i8dxgh","title":"Color Note","text":"Testing another new note - and changing this note"},{"id":"9sUX6TbRJs","title":"This is a new Note","text":"And notes require both a title and  contents"},{"id":"r_IE74TVf7","title":"Note to chage","text":"Not changed Yet!!! changed it now! and changing again"},{"id":"GndUspGrm5","title":"A Node to add!","text":"This is a changed note"}]